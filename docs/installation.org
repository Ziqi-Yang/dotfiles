#+title: Installation
#+auto_tangle: t
#+PROPERTY: header-args :tangle install.sh

All the code blocks in this document are exported into three files(=install.sh=, =post.sh= and =optional.sh=) in the same directory of this document using =org-babel-tanlge=. Tips are in the =Tips= section.

*Currently, the correctness of the scripts generated by this document haven't been tested*

#+begin_src sh
#!/usr/bin/env bash
set -e # exit on error
#+end_src

#+begin_src sh :tangle post.sh
#!/usr/bin/env bash
set -e # exit on error
#+end_src

#+begin_src sh :tangle optional.sh
#!/usr/bin/env bash
set -e # exit on error
#+end_src

The document is only for =Wayland=, since I won't switch to =Xorg= environment(In the last I use =bspwm=) in the future.

* TODOS
** TODO customize =archinstall= script

* Tips
- Recommend to use =emacs= to read this document.
- Make sure all the code block are assigned by the property label =tangle yes=, the file is auto-tangled by default(org-auto-tangle), use key shortcut =<SPC-m-B>= to manually tangle the file.
- To show key shortcut for an executable, use command =rg <executable name> dotfiles/config/hypr/hyprland.conf=
- Scripts Execute Order:
  in the root directory of this repository
  1. =docs/install.sh=
  2. reboot and configure proxy [[*Networking]]
  3. =docs/post.sh=
  4. decide whether to execute =docs/optional.sh=

* Pre-requests
** Install git, clone the Repo, and cd into the root directory of the repo.
#+begin_src sh
# git clone --recurse-submodules --depth 1 --branch main https://github.com/Ziqi-Yang/dotfiles.git dotfiles
# cd dotfiles
#+end_src
** Use =archinstall= script to install basic Arch Linux system.
- Select =minial= for desktop environment(profile) since currently =archinstall= script doesn't support Hyprland(Hyprland hasn't merged into the official repository).
- Select =use NetworkManger= for =Network configuration=, note that =networkmanger-applet= won't be installed if you selected a =minial= desktop environment. Since it doesn't work on Wayland, I use the build in =nmtui= command to replace it.
** Add =archlinuxcn= package repository
#+begin_src sh
if grep -q 'archlinuxcn' /etc/pacman.conf; then
  echo 'already added "archlinuxcn" source'
else
  sudo echo '[archlinuxcn]' >> /etc/pacman.conf
  sudo echo 'Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch' >> /etc/pacman.conf
fi
sudo pacman -S archlinuxcn-keyring
#+end_src
** Change mirrors order in the =mirrorlist=
#+begin_src sh
sudo sed -i '1iServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist
sudo sed -i '1iServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist
#+end_src
** Install =paru= AUR helper
#+begin_src sh
sudo pacman -S paru
mkdir -p ~/.config/paru
#+end_src
** See all the entries needed to manually set/checkup in the document
You should look at both [[*Manual Checkup]] and =!!!= entries  before you start the installation.

Search for symbol =!!!= in the document, or you can execute command
#+begin_src sh :tangle no
rg '!!!' ./docs/installation.org
#+end_src

* System
** Basic
- =xdg-user-dirs=: create user default directories(like =Download=, =Document=)
- =ntfs-3g=: NTFS filesystem driver and utilities
- =udisks2= & =udiskie=: enable auto mount of USB flash disk
- =fish=: fish shell
- =ripgrep=: search, alternative for =grep=
- =fd=: search, alternative for =find=
- =htop=: modern top
- =neofetch=: fetch system information
- =brightnessctl=: brightness control
- [[https://github.com/rofl0r/ncdu][ncdu:]] disk space usage (du)
- [[https://github.com/muesli/duf][duf:]] disk usage (df)
- [[https://github.com/ogham/exa][exa]]: modern ls
- =hwinfo=: hardware info
- =rsync=: alternative for SCP
#+begin_src sh
sudo pacman -S git xdg-user-dirs ntfs-3g udisks2 udiskie fish ripgrep fd htop neofetch wget brightnessctl ncdu duf hwinfo rsync
#+end_src

** Sound
*** Computer
=sof-firmware alsa-ucm-conf= packages are required for some newer laptop according to [[https://wiki.archlinux.org/title/Advanced_Linux_Sound_Architecture#ALSA_firmware][Advanced Linux Sound Architecture#ALSA_firmware - Arch Wiki]]
#+begin_src sh
sudo pacman -S pulseaudio alsa-utils pulseaudio-alsa pamixer sof-firmware alsa-ucm-conf
#+end_src
*** Bluetooth
- =bluez-utils= provide =bluetoothctl= tool
- =pavucontrol= provide the GUI for PulseAudio
- =blueman= provide GUI for Bluetooth
#+begin_src sh
sudo pacman -S bluez bluez-utils pulseaudio-bluetooth pulseaudio-alsa blueman
sudo systemctl enable bluetooth
sudo usermod -a -G lp $USER
#+end_src
** GRUB
#+begin_src sh
sudo pacman -S os-prober
sudo sed '1aGRUB_DISABLE_OS_PROBER=false' /etc/default/grub
sudo grub-mkconfig -o /boot/grub/grub.cfg
#+end_src
** Plymouth
#+begin_src sh :tangle post.sh
paru -S plymouth-git

sudo cp /etc/mkinitcpio.conf /etc/mkinitcpio.conf.bak
sudo sed -i -E 's/^HOOKS=\((.*)\)/HOOKS=(\1 plymouth)/' /etc/mkinitcpio.conf
sudo mkinitcpio -p linux

sudo cp /etc/default/grub /etc/default/grub.bak
sudo sed -i -E 's/GRUB_CMDLINE_LINUX_DEFAULT="(.*)"/GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 nowatchdog quiet splash"/' /etc/default/grub
sudo grub-mkconfig -o /boot/grub/grub.cfg
#+end_src
Reference:
1. https://www.debugpoint.com/install-plymouth-arch-linux/
2. https://wiki.archlinux.org/title/plymouth
** Touchpad
#+begin_src sh
sudo pacman -S libinput xf86-input-synaptics
#+end_src

** Display Manager
- =lxdm=: can be used if =lightdm= doesn't work
#+begin_src sh
sudo pacman -S lightdm lightdm-slick-greeter lxdm
sudo systemctl disable lxdm
sudo systemctl enable lightdm
#+end_src
** GPU Driver
*!!! Refer to Arch Wiki to find what drivers suit your GPU*

#+begin_src sh
sudo pacman -S mesa vulkan-intel nvidia nvidia-settings
#+end_src
** Wayland(Hyprland) Utility
- =wev=: alternative of =xev=, show mouse and key name
- =wl-clipboard=: alternative of =xclip=
- =clipman=: clipboard manager for Wayland
- =hyprpaper=: background paper
- =rofi-lbonn-wayland-git=: rofi Wayland fork
- =waybar-hyprland-git=: Wayland bar (with Hyprland integration)
- =gammastep=: screen gamma tool(protect eyes)
- =wofi=: for clipboard selection
#+begin_src sh
paru -S hyprland-git
sudo pacman -S xorg-xwayland xorg-xlsclients qt5-wayland glfw-wayland qt6-wayland
sudo pacman -S dunst wireplumber pipewire polkit-kde-agent

sudo pacman -S wev-git wl-clipboard wtype clipman gammastep wofi
#+end_src

#+begin_src sh :tangle post.sh
paru -S xdg-desktop-portal-hyprland-git

paru -S hyprpaper rofi-lbonn-wayland-git waybar-hyprland-git
#+end_src
** Virtual Machine
according to https://wiki.manjaro.org/index.php/Virt-manager/en#Install_virt-manager.2C_qemu_and_all_dependencies

#+begin_src sh
sudo pacman -S virt-manager qemu vde2 iptables-nft dnsmasq bridge-utils openbsd-netcat edk2-ovmf swtpm
sudo systemctl enable libvirtd.service
sudo usermod -a -G libvirt $USER
#+end_src
** UI
*** Font
copy fonts in the repo to user font path
- =JosefinSans-Regular.ttf=: [[file:../dotfiles/Public/matter/my_command.sh]] need
- =MaterialDesignIconsDesktop.ttf=: [[https://github.com/Templarian/MaterialDesign-Font][GitHub]] [[https://pictogrammers.com/library/mdi/][Icons]]
- =icon-font=: https://icofont.com/
#+begin_src sh
mkdir -p ~/.local/share/fonts
cp assets/fonts/* ~/.local/share/fonts/
fc-cache -rv
#+end_src
**** Chinese Font
- =ttf-zpix=: pixel font
#+begin_src sh
sudo pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra  ttf-lxgw-wenkai ttf-lxgw-wenkai-mono wqy-zenhei
#+end_src

#+begin_src sh :tangle post.sh
paru -S ttf-zpix ttf-wps-fonts
#+end_src
**** English Font
#+begin_src sh
sudo pacman -S ttf-firacode-nerd ttf-ibm-plex
#+end_src

#+begin_src sh :tangle post.sh
paru -S nerd-fonts-ibm-plex-mono
#+end_src
**** Icon Font
#+begin_src sh
sudo pacman -S ttf-font-awesome
#+end_src
*** Install Cursor Theme
#+begin_src sh :tangle post.sh
paru -S googledot-cursor-theme
#+end_src
*** Images
#+begin_src sh
sudo mkdir -p /usr/share/background/
sudo cp assets/images/background/* /usr/share/background/
#+end_src

* User Applications
install configuration files
#+begin_src sh :tangle post.sh
# ./dotdrop.sh install --dry # dry run
./dotdrop.sh install
#+end_src

** Utility
- =hyprpick=: color pick for =Hyprland=
- =fzf=: command line fuzzy finder
- =trash-cli=: trash bin management
- [[https://github.com/ajeetdsouza/zoxide][zoxide]]: advanced cd
- =selectdefaultapplication-git=: select default application for specific extension
- [[https://github.com/Genymobile/scrcpy][scrcpy]]: screen copy, connect your android phone
- =gtk3-demos=: contains =gtk3-icon-browser=, which is used for browse icons
- [[https://github.com/yt-dlp/yt-dlp][yt-dlp]]: download YouTube videos(and videos from other video sites)
- [[https://github.com/iawia002/lux][lux]]: download Bilibili videos(and videos from other video sites)
- =aur-auto-vote-git=: auto vote installed AUR packages
- [[https://github.com/svenstaro/rofi-calc][rofi-calc]]: a calculator interacts with rofi
- [[https://github.com/fdw/rofimoji][rofimoji]]: a emoji selector interacts with rofi
- [[https://gitlab.com/dwt1/shell-color-scripts][shell-color-scripts]]: print colorful ASCII arts, which can be configured to be displayed at the shell startup. (currently not using it)
- [[https://github.com/pipeseroni/pipes.sh][pipes-sh]]: show pipes at terminal(currently not using it)
- =wudao-dict-git=: dict/translator
- =bat=: modern =cat=
- =curl=
- =fd=: modern =find=
- =ffmpeg=
- =gnupg=: gpg
- =hugo=: blog
#+begin_src sh
sudo pacman -S fzf trash-cli zoxide scrcpy gtk3-demos yt-dlp lux-dl rofimoji rofi-calc bat curl fd ffmpeg gnupg hugo
#+end_src

#+begin_src sh :tangle post.sh
paru -S hyprpick selectdefaultapplication-git aur-auto-vote-git wudao-dict-git
#+end_src

#+begin_src sh :tangle optional.sh
paru -S shell-color-scripts pipes-sh
#+end_src
** OCR
It is recommended to use website [[https://pearocr.com/#/][pearocr]]
#+begin_src sh :tangle optional.sh
paru -S tesseract gimagereader-qt tesseract-data-chi_sim tesseract-data-eng # gimagereader-qt can be replaced with gimagereader-gtk
#+end_src
** Input Method - Fcitx5
- =fcitx5-im=: group of the basic components of fcitx5(select all when it prompts you to choose which component to install)
- =fcitx5-chinese-addons=: for Chinese
- =fcitx5-anthy=: for Japanese
- =fcitx5-pinyin-moegirl=: moegirl(萌娘百科)
- =fcitx5-material-color=: color theme
- =fcitx5-pinyin-custom-pinyin-dictionary=: 某人自建拼音输入法词库，百万常用词汇量 https://github.com/wuhgit/CustomPinyinDictionary
#+begin_src sh
sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-anthy fcitx5-pinyin-moegirl fcitx5-material-color
#+end_src

#+begin_src sh :tangle post.sh
paru -S fcitx5-pinyin-custom-pinyin-dictionary
#+end_src
** Media
*** Image Editor/Viewer
- =gimp=: editor
- =inkscape=: SVG editor (also provide cli tool)
- =gwenview= & =imv=: image viewer
- =aseprite=: pixel art editor

#+begin_src sh
sudo pacman -S gimp inkscape gwenview imv
#+end_src

#+begin_src sh :tangle post.sh
paru -S aseprite
#+end_src
*** Video Editor/Viewer / Recorder
#+begin_src sh
sudo pacman -S mpv obs-studio blender
#+end_src
*** PDF Reader
#+begin_src sh
sudo pacman -S zathura zathura-cb zathura-djvu zathura-pdf-mupdf
#+end_src

#+begin_src sh :tangle post.sh
paru -S sioyek-git
#+end_src
*** Audio / Music Player
#+begin_src sh
sudo pacman -S mpg123
#+end_src

#+begin_src sh :tangle post.sh
paru -S yesplaymusic
#+end_src
** ScreenShot
- =grim slurp swappy=: combine three to a screenshot application for Wayland
- =flameshot=: currently not support Hyprland
#+begin_src sh
sudo pacman -S grim slurp swappy flameshot
#+end_src
** File Managers
#+begin_src sh
sudo pacman -S ranger dolphin
#+end_src
** Networking
#+begin_src sh :tangle post.sh
paru -S clash-for-windows-bin
#+end_src
** Office
#+begin_src sh :tanlge post.sh
paru -S wps-office wps-office-mui-zh-cn ttf-wps-fonts
#+end_src
** Meeting
#+begin_src sh :tangle post.sh
paru -S wemeet-bin zoom
#+end_src
** Archiving Tools
1. =ark= can decompress 7z file with the support of =p7zip=
2. =unarchiver= is required by =ranger= (my custom command)
#+begin_src sh
sudo pacman -S ark unarchiver p7zip gzip unzip zip
#+end_src
** Terminal Emulators
- =kitty= main terminal emulator
- =alacritty=
#+begin_src sh
sudo pacman -S alacritty kitty
#+end_src
** Browser
#+begin_src sh
sudo pacman -S firefox
#+end_src
** Chat
#+begin_src sh
sudo pacman -S telegram-desktop
#+end_src

#+begin_src sh :tangle post.sh
paru -S electronic-wechat-uos-bin
#+end_src
** Customization Tool
- =lxappearance=: GTK theme
- =qt5ct=: change qt theme for application
#+begin_src sh
sudo pacman -S lxappearance qt5ct
#+end_src

** Editors
- =emacs29-git=: native-comp and pgtk(for wayland capability) support
#+begin_src sh
sudo pacman -S vi vim
#+end_src

#+begin_src sh :tangle post.sh
paru -S emacs29-git
#+end_src
** Programming Language & Specific Tools
*** Git Tools
- [[https://github.com/rtyley/bfg-repo-cleaner][bfg]] Removes large or troublesome blobs like git-filter-branch does, but faster. (remove secrets and big files in git history)
- [[https://github.com/zricethezav/gitleaks][gitleaks]] check your git repo secrets leaks
- [[https://github.com/dandavison/delta][git-delta]]: git diff tool
#+begin_src sh
sudo pacman -S bfg git-delta
#+end_src

#+begin_src sh :tangle post.sh
paru -S gitleaks
#+end_src
*** Docker
#+begin_src
sudo pacman -S podman
#+end_src

*** Build Tools
#+begin_src sh
sudo pacman -S make cmake
#+end_src
*** Debug Tools
- =valgrind=: check cc program memory-management problems
- =ptvsd= & =debugpy=: Emacs debug python
- =pygments=: syntax highlighting for [[https://github.com/cyrus-and/gdb-dashboard][gdb dashboard]]
#+begin_src sh
sudo pacman -S lldb gdb cgdb valgrind
#+end_src

#+begin_src sh :tangle post.sh
paru -S lldb-mi-git

pip3 install ptvsd debugpy pygments --user
#+end_src
*** Python
#+begin_src sh
sudo pacman -S ipython python-pip
#+end_src

Emacs python mode
#+begin_src sh :tangle post.sh
pip install pyright pytest nose black pyflakes isort
#+end_src
*** Rust
#+begin_src sh
sudo pacman -S rustup rust-analyzer
#+end_src

Emacs rust mode
#+begin_src sh :tangle post.sh
rustup component add rustfmt-preview clippy-preview
cargo install cargo-check
#+end_src
*** CC
- =man-pages=: Linux man pages, provides c API docs
#+begin_src sh
sudo pacman -S clang ccls man-pages
#+end_src

#+begin_src sh :tangle post.sh
pip install cmake-language-server --user
paru -S rtags-git
#+end_src
*** Java
#+begin_src sh
sudo pacman -S jdk8-openjdk jdk-openjdk maven
#+end_src

(optional) set jdk8 as default jdk version
#+begin_src sh :tangle optional.sh
# sudo archlinux-java set java-8-openjdk/jre
#+end_src
*** Golang
#+begin_src sh
paru -S go
#+end_src

#+begin_src sh :tangle post.sh
go install github.com/x-motemen/gore/cmd/gore@latest
go install github.com/stamblerre/gocode@latest
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/cmd/gorename@latest
go install golang.org/x/tools/cmd/guru@latest
go install github.com/cweill/gotests/gotests@latest
go install github.com/fatih/gomodifytags@latest
paru -S golangci-lint-bin gopls
#+end_src
*** sh
#+begin_src sh
sudo pacman -S shellcheck bash-language-server
#+end_src

#+begin_src sh :tangle post.sh
paru -S bashdb
#+end_src
*** latex
- =texlab= & =biber=: required by
#+begin_src sh
sudo pacman -S texlive-most texlive-lang texlab biber
#+end_src
*** Flutter
https://dev.to/awais/configure-flutter-development-environment-on-manjaro-arch-linux-4a0a
**** FVM Setup
#+begin_src sh :tangle post.sh
paru -S fvm-bin
fvm install stable
fvm global stable
#+end_src
**** Install Android SDK
*!!! Not completed. Need to be updated.*
#+begin_src sh :tanlge post.sh
sudo pacman -S android-sdk android-sdk-platform-tools android-sdk-build-tools
sudo pacman -S android-platform

sudo groupadd android-sdk
sudo gpasswd -a $USER android-sdk
sudo setfacl -R -m g:android-sdk:rwx /opt/android-sdk
sudo setfacl -d -m g:android-sdk:rwX /opt/android-sdk
#+end_src

*** Node.js and NPM and Deno
Here we install =node.js= and =npm= for system use, later we will use =nvm= to manage =node= for user use(in fish shell)
#+begin_src sh
sudo pacman -S nodejs npm deno
#+end_src
**** Use nvm to manage Node.js & NPM
Use =nvm= (already installed in the fish configuration) to install.
#+begin_src sh :tangle post.sh
nvm install latest
nvm use latest
#+end_src

*** Others
- =ltex-ls-bin=: lsp ltex grammar check (Emacs =lsp-ltex= package)
- =wakatime=: wakatime CLI that editor plugin can use
- =sqlite= & =wordnet-cli=: (Emacs =:loopup=)
- =browser-sync=: live web preview
- =libvterm=: (Emacs =vterm= needs)
- [[https://github.com/XAMPPRocky/tokei][tokei]]: count code
- =hexyl=: view hex in terminal
- [[https://github.com/chubin/cheat.sh][cht.sh-git]]: cheat sheet
- =jq=: manipulate and pretty print JSON
#+begin_src sh
sudo pacman -S sqlite pandoc libvterm tokei hexyl jq
#+end_src

#+begin_src sh :tangle post.sh
paru -S ltex-ls-bin wakatime wordnet-cli cht.sh-git
npm install -g browser-sync # live web preview
#+end_src
* Configurations
** qt5ct
#+begin_src sh
echo 'QT_QPA_PLATFORMTHEME=qt5ct' >> >> /etc/environment
#+end_src
** Plymouth
use theme [[https://github.com/PROxZIMA/proxzima-plymouth][Proxzima]]
#+begin_src sh :tangle post.sh
paru -S proxzima-plymouth-git
sudo plymouth-set-default-theme -R proxzima
#+end_src

** Fcitx5
#+begin_src sh
echo 'GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx' >> /etc/environment
#+end_src
** Waybar
The function of each package can be found in [[file:~/Documents/dotfiles/dotfiles/config/waybar/README.org][WayBar - README.org]]
#+begin_src sh
sudo pacman -S alacritty kitty mpg123 htop duf trash-cli dolphin playerctl pacman-contrib libpulse
#+end_src

#+begin_src sh :tangle post.sh
paru -S uair
pip install requests
#+end_src
** Handle Power Key and Lid Switch Behaviors
#+begin_src sh
sudo sed -i "s/#HandleLidSwitch=suspend/HandleLidSwitch=ignore/g" /etc/systemd/logind.conf
sudo sed -i "s/#HandleLidSwitchExternalPower=suspend/HandleLidSwitchExternalPower=ignore" /etc/systemd/logind.conf
sudo sed -i "s/#HandleLidSwitchExternalPower=suspend/HandleLidSwitchExternalPower=ignore/g" /etc/systemd/logind.conf
#+end_src
** Makepkg use more core
#+begin_src sh
sudo sed -i 's/#MAKEFLAGS=.*/MAKEFLAGS="-j$(nproc)"/g' /etc/makepkg.conf
#+end_src
** Increase sudo login time limit
#+begin_src sh
sudo sed -i 's/# deny =.*/deny = 5/g' /etc/security/faillock.conf
#+end_src
** Ranger Enhance
*** Command & Preview
- use =kitty= to preview image
the needed programs are specialized in the =dotfiles/.config/ranger/scope.sh=
A) =python-pdftotext=: preview pdf
B) =highlight=: code highlight
C) =mediainfo=: media metadata
D) =poppler=:
E) =w3m=: HTML
F) =doc=: preview doc
G) =docsx2txt=: docs
H) =jq=: JSON
I) =python-pdftotext=: PDF preview
J) =ffmpegthumbnailer=: show video first frame
K) =fontforge=: font preview
L) =trash-cli=: used in my custom command to interact with trash bin
M) =unarchiver=: manipulate archives
N) =zoxide=: zoxide interaction
O) =dragon-drop=: drag and drop support(keybinding =r=)
#+begin_src sh
sudo pacman -S highlight poppler mediainfo w3m catdoc docx2txt jq python-pdftotext ffmpegthumbnailer fontforge trash-cli unarchiver zoxide dragon-drop
#+end_src

#+begin_src sh :tangle post.sh
paru -S python-xlsx2csv
#+end_src
*** Allow unauthenticated mounting
according to https://dynacont.net/documentation/linux/udisks2_polkit_Allow_unauthenticated_mounting/
#+begin_src sh
mkdir -p /etc/polkit-1/rules.d
echo '// See the polkit(8) man page for more information
// about configuring polkit.

// Allow udisks2 to mount devices without authentication
// for users in the "wheel" group.
polkit.addRule(function(action, subject) {
    if ((action.id == "org.freedesktop.udisks2.filesystem-mount-system" ||
         action.id == "org.freedesktop.udisks2.filesystem-mount") &&
        subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});' > /etc/polkit-1/rules.d/10-udisks2.rules
#+end_src

** lightdm settings
*** Set default greeter
#+begin_src sh
sudo sed -i 's/#greeter-session=.*/greeter-session=hello/g' /etc/lightdm/lightdm.conf
#+end_src
*** Set default session
#+begin_src sh
echo '#!/bin/sh

cd ~ || exit

export _JAVA_AWT_WM_NONREPARENTING=1
export XCURSOR_SIZE=24

# qt
QT_AUTO_SCREEN_SCALE_FACTOR=1
QT_QPA_PLATFORM="wayland;xcb"
QT_WAYLAND_DISABLE_WINDOWDECORATION=1
QT_QPA_PLATFORMTHEME=qt5ct

XCURSOR_THEME=GoogleDot-Blue
XCURSOR_SIZE=24

exec Hyprland' > /usr/share/wayland-sessions/hyprland_wrap
chmod +x /usr/share/wayland-sessions/hyprland_wrap

echo '[Desktop Entry]
Name=Hyprland_Wrap
Comment=An intelligent dynamic tiling Wayland compositor
Exec=/usr/share/wayland-sessions/hyprland_wrap
Type=Application' >  /usr/share/wayland-sessions/hyprland_wrap.desktop

sudo sed -i 's/#user-session=.*/user-session=hyprland_wrap/g' /etc/lightdm/lightdm.conf
#+end_src
*** Enable Xsession?
*!!!* Don't know why, but when I disable it, I cannot log in to the Harland desktop(only tried Hyprland).
#+begin_src sh
# sudo sed -i 's/#session-wrapper=.*/session-wrapper=\/etc\/lightdm\/Xsession/g' /etc/lightdm/lightdm.conf
#+end_src

*** Slick-Greeter Settings
#+begin_src sh
echo '[Greeter]
background=/usr/share/background/4.png
enable-hidpi=auto' > /etc/lightdm/slick-greeter.conf
#+end_src

** Disable DHCP System Units
see [[https://wiki.archlinux.org/title/NetworkManager#DHCP_client][NetworkManager - DHCP client - Arch Wiki]]
#+begin_src sh
sudo systemctl disable dhcpcd
#+end_src
** Set Default Applications
*** Change default terminal
=rofi= will use the default terminal to execute command
#+begin_src sh
echo 'export TERMINAL="alacritty"' >> ~/.profile
#+end_src
** UI
*** Icon theme
#+begin_src sh
sudo pacman -S tela-icon-theme-git
#+end_src
Also try [[https://store.kde.org/p/1678986/][Deepin Icons 2022]]
*** GTK theme
#+begin_src sh :tangle post.sh
paru -S layan-gtk-theme-git
#+end_src
*** Qt theme
#+begin_src sh
sudo pacman -S kvantum
#+end_src
*** Fcitx5 theme
#+begin_src sh :tangle post.sh
paru -S fcitx5-nord
#+end_src
*** GRUB theme
use the following command to generate(and install) grub theme
#+begin_src sh :tangle post.sh
env all_proxy=127.0.0.1:7890 dotfiles/Public/matter/my_command.sh
#+end_src

** Change user default shell
#+begin_src sh :tangle post.sh
chsh -s /bin/fish
#+end_src
** Firefox disable CTRL-w
File =~/.mozilla/firefox/user.js= is synced using DotDrop.
#+begin_src sh
paru -S firefox-user-autoconfig

# the pakcage needs some tweaks
echo 'pref("general.config.sandbox_enabled", false);' >> /usr/lib/firefox/defaults/pref/autoconfig.js
#+end_src
* Manual Checkup
** Different time display for Linux and windows
https://sspai.com/post/55983
** power off without privilege
https://askubuntu.com/questions/168879/shutdown-from-terminal-without-entering-password
** Secrets
1. Go to private repo: https://github.com/Ziqi-Yang/secrets
2. Download ZIP of the repo source code.
3. Run ~make decrypt~
* Useful Resources
1. https://arch.icekylin.online/
